//from implementation was not generated by thiserror with 'a lifetime https://github.com/dtolnay/thiserror/issues/68

#[derive(
    Debug, thiserror::Error, serde::Serialize, error_occurence::ImplErrorOccurenceFromCrate,
)]
pub enum OneWrapperError<'a> {
    Something {
        inner_error: OneWrapperErrorEnum<'a>,
        code_occurence: crate::common::code_occurence::CodeOccurence<'a>,
    },
}

// impl<'a> std::fmt::Display for OneWrapperError<'a> {
//     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
//         use crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfig;
//         write!(f, "{}", self.to_string_without_config())
//     }
// }

// impl<'a, ConfigGeneric>
//     crate::traits::error_logs_logic::source_to_string_with_config::SourceToStringWithConfig<
//         'a,
//         ConfigGeneric,
//     > for OneWrapperError<'a>
// where
//     ConfigGeneric: crate::traits::fields::GetSourcePlaceType
//         + crate::traits::fields::GetTimezone
//         + crate::traits::get_server_address::GetServerAddress,
// {
//     fn source_to_string_with_config(&self, config: &ConfigGeneric) -> String {
//         match self {
//             OneWrapperError::Something {
//                 inner_error,
//                 code_occurence: _code_occurence,
//             } => {
//                 use crate::traits::error_logs_logic::to_string_with_config::ToStringWithConfigForSourceToStringWithConfig;
//                 inner_error.to_string_with_config_for_source_to_string_with_config(config)
//             }
//         }
//     }
// }

// impl<'a> crate::traits::error_logs_logic::source_to_string_without_config::SourceToStringWithoutConfig<'a> for OneWrapperError<'a> {
//     fn source_to_string_without_config(&self) -> String {
//         match self {
//             OneWrapperError::Something { inner_error, code_occurence: _code_occurence } => {
//                 use crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfig;
//                 inner_error.to_string_without_config()
//             },
//         }
//     }
// }

// impl<'a> crate::traits::error_logs_logic::get_code_occurence::GetCodeOccurence<'a>
//     for OneWrapperError<'a>
// {
//     fn get_code_occurence(&self) -> &crate::common::code_occurence::CodeOccurence {
//         match self {
//             OneWrapperError::Something {
//                 inner_error: _inner_error,
//                 code_occurence,
//             } => code_occurence,
//         }
//     }
// }

// #[derive(Debug, thiserror::Error, serde::Serialize, serde::Deserialize)]
// pub enum OneWrapperErrorWithDeserialize<'a> {
//     Something {
//         #[serde(borrow)]
//         inner_error: OneWrapperErrorEnumWithDeserialize<'a>,
//         #[serde(borrow)]
//         code_occurence: crate::common::code_occurence::CodeOccurenceWithDeserialize<'a>,
//     },
// }

// impl<'a> std::fmt::Display for OneWrapperErrorWithDeserialize<'a> {
//     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
//         use crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfigWithDeserialize;
//         write!(f, "{}", self.to_string_without_config_with_deserialize())
//     }
// }

// impl<'a> crate::traits::error_logs_logic::source_to_string_without_config::SourceToStringWithoutConfig<'a> for OneWrapperErrorWithDeserialize<'a> {
//     fn source_to_string_without_config(&self) -> String {
//         match self {
//             OneWrapperErrorWithDeserialize::Something { inner_error, code_occurence: _code_occurence } => {
//                 use crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfigWithDeserialize;
//                 inner_error.to_string_without_config_with_deserialize()
//             },
//         }
//     }
// }

// impl<'a>
//     crate::traits::error_logs_logic::get_code_occurence::GetCodeOccurenceWithDeserialize<'a>
//     for OneWrapperErrorWithDeserialize<'a>
// {
//     fn get_code_occurence_with_deserialize(
//         &self,
//     ) -> &crate::common::code_occurence::CodeOccurenceWithDeserialize<'a> {
//         match self {
//             OneWrapperErrorWithDeserialize::Something {
//                 inner_error: _inner_error,
//                 code_occurence,
//             } => code_occurence,
//         }
//     }
// }

#[derive(
    Debug, thiserror::Error, serde::Serialize, error_occurence::ImplErrorOccurenceFromCrate,
)]
pub enum OneWrapperErrorEnum<'a> {
    Three(crate::repositories_types::three_four_five_six_seven_eight::ThreeWrapperError<'a>),
}

// impl<'a> std::fmt::Display for OneWrapperErrorEnum<'a> {
//     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
//         use crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfig;
//         write!(f, "{}", self.to_string_without_config())
//     }
// }

// impl<'a, ConfigGeneric>
//     crate::traits::error_logs_logic::to_string_with_config::ToStringWithConfigForSourceToStringWithConfig<
//         'a,
//         ConfigGeneric,
//     > for OneWrapperErrorEnum<'a>
// where
//     ConfigGeneric: crate::traits::fields::GetSourcePlaceType
//         + crate::traits::fields::GetTimezone
//         + crate::traits::get_server_address::GetServerAddress,
// {
//     fn to_string_with_config_for_source_to_string_with_config(&self, config: &ConfigGeneric) -> String {
//         match self {
//             OneWrapperErrorEnum::Three(i) => {
//                 i.to_string_with_config_for_source_to_string_with_config(config)
//             }
//         }
//     }
// }

// impl<'a> crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfig<'a>
//     for OneWrapperErrorEnum<'a>
// {
//     fn to_string_without_config(&self) -> String {
//         match self {
//             OneWrapperErrorEnum::Three(i) => i.to_string_without_config(),
//         }
//     }
// }

// #[derive(Debug, thiserror::Error, serde::Serialize, serde::Deserialize)]
// pub enum OneWrapperErrorEnumWithDeserialize<'a> {
//     #[serde(borrow)]
//     Three(crate::dev::ThreeWrapperErrorWithDeserialize<'a>),
// }

// impl<'a> std::fmt::Display for OneWrapperErrorEnumWithDeserialize<'a> {
//     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
//         use crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfigWithDeserialize;
//         write!(f, "{}", self.to_string_without_config_with_deserialize())
//     }
// }

// impl<'a>
//     crate::traits::error_logs_logic::to_string_without_config::ToStringWithoutConfigWithDeserialize<
//         'a,
//     > for OneWrapperErrorEnumWithDeserialize<'a>
// {
//     fn to_string_without_config_with_deserialize(&self) -> String {
//         match self {
//             OneWrapperErrorEnumWithDeserialize::Three(i) => {
//                 i.to_string_without_config_with_deserialize()
//             }
//         }
//     }
// }
